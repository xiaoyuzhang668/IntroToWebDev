//window.addEventListener("DOMContentLoaded", domLoaded);
//function domLoaded() {
//Attack Vector
const av = document.querySelectorAll('input[name="AV"]');
let av_point;
for (let i = 0; i < av.length; i++) {
	av[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "AV_N":
					av_point = 0.85;
					break;
				case "AV_A":
					av_point = 0.62;
					break;
				case "AV_L":
					av_point = 0.55;
					break;
				case "AV_P":
					av_point = 0.20;
					break;
				default:
					av_point = 0;
			}
		}
	})
}

//Attack Complexity
const ac = document.querySelectorAll('input[name="AC"]');
let ac_point;
for (let i = 0; i < ac.length; i++) {
	ac[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "AC_L":
					ac_point = 0.77;
					break;
				case "AC_H":
					ac_point = 0.44;
					break;
				default:
					ac_point = 0;
			}
		}
	})
}

//Privilege Required
const pr = document.querySelectorAll('input[name="PR"]');
let pr_point;
for (let i = 0; i < pr.length; i++) {
	pr[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "PR_N":
					pr_point = 0.85;
					break;
				case "PR_L":
					pr_point = 0.62;
					break;
				case "PR_H":
					pr_point = 0.27;
					break;
				default:
					pr_point = 0;
			}
		}
	})
}

//User Interaction
const ui = document.querySelectorAll('input[name="UI"]');
let ui_point;
for (let i = 0; i < ui.length; i++) {
	ui[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "UI_N":
					ui_point = 0.85;
					break;
				case "UI_R":
					ui_point = 0.62;
					break;
				default:
					ui_point = 0;
			}
		}
	})
}

//Scope
const scope = document.querySelectorAll('input[name="scope"]');
let scope_point;
for (let i = 0; i < scope.length; i++) {
	scope[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "scope_U":
					scope_point = 1.0;
					break;
				case "scope_C":
					scope_point = 1.08;
					break;
				default:
					scope_point = 0;
			}
		}
	})
}

let bI;
let bA;
let bC;
//Confidentiality Impact
const conf = document.querySelectorAll('input[name="conf"]');
let conf_point;
for (let i = 0; i < conf.length; i++) {
	conf[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "conf_N":
					conf_point = "None";
					break;
				case "conf_L":
					conf_point = "Low";
					break;
				case "conf_H":
					conf_point = "High";
					break;
				default:
					conf_point = "";
			}
		}
		bC = baseConfidentiality(sens_point, conf_point);
	})
}

//Integrity Impact
const integ = document.querySelectorAll('input[name="integ"]');
let integ_point;
for (let i = 0; i < integ.length; i++) {
	integ[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "integ_N":
					integ_point = "None";
					break;
				case "integ_L":
					integ_point = "Low";
					break;
				case "integ_H":
					integ_point = "High";
					break;
				default:
					integ_point = "";
			}
		}
		bI = baseIntegrity(health_point, integ_point);
	})
}

//Availability Impact
const avail = document.querySelectorAll('input[name="avail"]');
let avail_point;
for (let i = 0; i < avail.length; i++) {
	avail[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "avail_N":
					avail_point = "None";
					break;
				case "avail_L":
					avail_point = "Low";
					break;
				case "avail_H":
					avail_point = "High";
					break;
				default:
					avail_point = "";
			}
		}
		bA = baseAvailability(health_point, avail_point);
	})
}

//Health Impact
const health = document.querySelectorAll('input[name="health"]');
let health_point;
for (let i = 0; i < health.length; i++) {
	health[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "health_N":
					health_point = "None";
					break;
				case "health_L":
					health_point = "Low";
					break;
				case "health_H":
					health_point = "High";
					break;
				default:
					health_point = "";
			}
		}
		bI = baseIntegrity(health_point, integ_point);
		bA = baseAvailability(health_point, avail_point);
	})
}

//Sensitivity
const sens = document.querySelectorAll('input[name="sens"]');
let sens_point;
for (let i = 0; i < sens.length; i++) {
	sens[i].addEventListener('change', function (e) {
		if (this.checked) {
			switch (this.value) {
				case "sens_N":
					sens_point = "None";
					break;
				case "sens_L":
					sens_point = "Low";
					break;
				case "sens_H":
					sens_point = "High";
					break;
				default:
					sens_point = "";
			}
		}
		bC = baseConfidentiality(sens_point, conf_point);
	})
}

//if (typeof av === 'object' && av !== null && 'addEventListener' in av) {
//update score
function updateScore() {
	let inputs = document.querySelectorAll('input[type="radio"]');
	let warnigMessage = document.getElementById("warning");
	let score = document.getElementById("score");
	// An empty array
	let checker = [];

	for (let i = 0; i < inputs.length; i++) {
		if (inputs[i].checked) {
			// Whenever find a checked element, push it in checker array
			checker.push(true);
		}
	}
	// when all 10 have been selected
	if (checker.length === 10) {
		warnigMessage.style.display = "none";
		let finalResult = calculation();
		score.innerHTML = finalResult;
	}
}
//run update score function on click
let inputs = document.querySelectorAll('input[type="radio"]');
for (let i = 0; i < inputs.length; i++) {
	inputs[i].addEventListener('click', updateScore, false);
}

//baseConfientialtity (LevlSensitivity, LevelConfientiality)
let baseC;

function baseConfidentiality(levelS, levelC) {
	switch (true) {
		case (levelS === "None" && levelC === "None"):
			baseC = 0.00;
			break;
		case (levelS === "Low" && levelC === "None"):
			baseC = 0.22;
			break;
		case (levelS === "High" && levelC === "None"):
			baseC = 0.56;
			break;
		case (levelS === "None" && levelC === "Low"):
			baseC = 0.00;
			break;
		case (levelS === "Low" && levelC === "Low"):
			baseC = 0.65;
			break;
		case (levelS === "High" && levelC === "Low"):
			baseC = 0.75;
			break;
		case (levelS === "None" && levelC === "High"):
			baseC = 0.00;
			break;
		case (levelS === "Low" && levelC === "High"):
			baseC = 0.85;
			break;
		case (levelS === "High" && levelC === "High"):
			baseC = 0.95;
			break;
		default:
			baseC = 0.00;
	}
	return baseC;
}

//BaseIntegrity(LevelHealthImpact, LevelIntegrity)
let baseI;

function baseIntegrity(levelH, levelI) {
	switch (true) {
		case (levelH === "None" && levelI === "None"):
			baseI = 0.00;
			break;
		case (levelH === "Low" && levelI === "None"):
			baseI = 0.22;
			break;
		case (levelH === "High" && levelI === "None"):
			baseI = 0.56;
			break;
		case (levelH === "None" && levelI === "Low"):
			baseI = 0.55;
			break;
		case (levelH === "Low" && levelI === "Low"):
			baseI = 0.60;
			break;
		case (levelH === "High" && levelI === "Low"):
			baseI = 0.75;
			break;
		case (levelH === "None" && levelI === "High"):
			baseI = 0.85;
			break;
		case (levelH === "Low" && levelI === "High"):
			baseI = 0.90;
			break;
		case (levelH === "High" && levelI === "High"):
			baseI = 0.95;
			break;
		default:
			baseI = 0.00;
	}
	return baseI;
}

//BaseAvailability(LevelHealthImpact,LevelAvailability)
let baseA;

function baseAvailability(levelH, levelA) {
	switch (true) {
		case (levelH === "None" && levelA === "None"):
			baseA = 0.00;
			break;
		case (levelH === "Low" && levelA === "None"):
			baseA = 0.22;
			break;
		case (levelH === "High" && levelA === "None"):
			baseA = 0.56;
			break;
		case (levelH === "None" && levelA === "Low"):
			baseA = 0.55;
			break;
		case (levelH === "Low" && levelA === "Low"):
			baseA = 0.60;
			break;
		case (levelH === "High" && levelA === "Low"):
			baseA = 0.65;
			break;
		case (levelH === "None" && levelA === "High"):
			baseA = 0.85;
			break;
		case (levelH === "Low" && levelA === "High"):
			baseA = 0.90;
			break;
		case (levelH === "High" && levelA === "High"):
			baseA = 0.95;
			break;
		default:
			baseA = 0.00;
	}
	return baseA;
}

function calculation() {
	let scoreFinal;
	let scoreBase = bC + bI + bA;
	let scoreEx = av_point * ac_point * pr_point * ui_point;

	if (scoreBase === 0) {
		scoreFinal = 0;
	} else {
		scoreFinal = scope_point * (3.326258289 * scoreBase) + (1.1 * scoreEx);
	}
	console.log(`score ${scoreFinal}`);
	console.log(`av ${av_point}`);
	console.log(`ac ${ac_point}`);
	console.log(`pr ${pr_point}`);
	console.log(`health ${health_point}`);
	console.log(`integ ${integ_point}`);
	console.log(`conf ${conf_point}`);
	console.log(`ui ${ui_point}`);
	console.log(`scope ${scope_point}`);
	console.log(`avail ${avail_point}`);
	console.log(`sens ${sens_point}`);
	console.log(bC);
	console.log(bI);
	console.log(bA);
	return Math.ceil(scoreFinal * 10) / 10;
}
